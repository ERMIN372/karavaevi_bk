import logging
import os
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, Optional

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from aiogram.utils import executor
from dotenv import load_dotenv

from zoneinfo import ZoneInfo

import storage


load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))
TECH_CHAT_ID = int(os.getenv("TECH_CHAT_ID", "0"))
TIMEZONE = ZoneInfo(os.getenv("TIMEZONE", "Europe/Moscow"))
ADMINS = {
    int(user_id)
    for user_id in os.getenv("ADMINS", "").split(",")
    if user_id.strip().isdigit()
}
RATE_LIMIT_PER_DAY = storage.RATE_LIMIT_PER_DAY

WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", "5000"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")

if not BOT_TOKEN:
    raise RuntimeError(
        "BOT_TOKEN is required. Please set it in Replit Secrets.\n"
        "Also required: GOOGLE_SERVICE_ACCOUNT_JSON_BASE64, GOOGLE_SPREADSHEET_ID, "
        "CHANNEL_ID, TECH_CHAT_ID, ADMINS"
    )

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
fsm_storage = MemoryStorage()
dp = Dispatcher(bot, storage=fsm_storage)


class DirectorStates(StatesGroup):
    date = State()
    time_from = State()
    time_to = State()
    note = State()
    confirm = State()


class WorkerStates(StatesGroup):
    date = State()
    time_from = State()
    time_to = State()
    note = State()
    confirm = State()


async def ensure_user(ctx: types.User) -> str:
    role = "director" if ctx.id in ADMINS else "worker"
    await storage.gs_ensure_user(
        {
            "id": ctx.id,
            "role": role,
            "username": ctx.username,
            "first_name": ctx.first_name,
            "last_name": ctx.last_name,
        }
    )
    return role


def build_start_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–Ø –¥–∏—Ä–µ–∫—Ç–æ—Ä –ª–∞–≤–∫–∏")
    keyboard.add("–Ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∞–≤–∫–∏")
    return keyboard


async def start_menu(message: types.Message) -> None:
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫ —Å–µ—Ç–∏ ¬´–ë—Ä–∞—Ç—å—è –ö–∞—Ä–∞–≤–∞–µ–≤—ã¬ª."
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º:"
    await message.answer(text, reply_markup=build_start_keyboard())


def format_mention(entity: Any) -> str:
    full_name = (
        getattr(entity, "full_name", None)
        or getattr(entity, "title", None)
        or getattr(entity, "username", None)
    )
    if not full_name:
        first_name = getattr(entity, "first_name", None)
        last_name = getattr(entity, "last_name", None)
        full_name = " ".join(filter(None, [first_name, last_name])) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    return f'<a href="tg://user?id={entity.id}">{full_name}</a>'


async def guard_rate_limit(user_id: int) -> bool:
    allowed = await storage.guard_rate_limit_gs(user_id)
    if not allowed:
        logging.info("User %s hit rate limit %s", user_id, RATE_LIMIT_PER_DAY)
    return allowed


def validate_timeslot(date_text: str, time_from_text: str, time_to_text: str) -> Optional[str]:
    try:
        date_obj = datetime.strptime(date_text, "%Y-%m-%d").date()
    except ValueError:
        return "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î."

    today = datetime.now(TIMEZONE).date()
    if date_obj < today:
        return "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º."

    try:
        from_parts = datetime.strptime(time_from_text, "%H:%M").time()
        to_parts = datetime.strptime(time_to_text, "%H:%M").time()
    except ValueError:
        return "–í—Ä–µ–º—è —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú."

    if from_parts >= to_parts:
        return "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è."

    for check_time in (from_parts, to_parts):
        if check_time.minute % 15 != 0:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–≥ 15 –º–∏–Ω—É—Ç."

    delta = datetime.combine(date_obj, to_parts) - datetime.combine(date_obj, from_parts)
    if delta > timedelta(hours=12):
        return "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —á–∞—Å–æ–≤."

    return None


async def send_tech(message: str) -> None:
    if TECH_CHAT_ID == 0:
        logging.error("TECH_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: %s", message)
        return
    try:
        await bot.send_message(TECH_CHAT_ID, message)
    except Exception as exc:  # noqa: BLE001
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö-—á–∞—Ç: %s", exc)


async def fetch_shops() -> Dict[int, str]:
    return storage.get_shops()


def render_channel_post(record: Dict[str, Any]) -> str:
    shop_name = record.get("shop_name") or "–õ—é–±–∞—è –ª–∞–≤–∫–∞"
    if record["kind"] == "director":
        title = "üîî –ó–∞—è–≤–∫–∞ –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ª–∞–≤–∫–∏"
        note = record.get("note") or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        return (
            f"{title}\n"
            f"–õ–∞–≤–∫–∞: {shop_name}\n"
            f"–î–∞—Ç–∞: {record['date']}\n"
            f"–°–º–µ–Ω–∞: {record['time_from']}‚Äì{record['time_to']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {note}\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º."
        )
    title = "üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏—â–µ—Ç —Å–º–µ–Ω—É"
    note = record.get("note") or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    return (
        f"{title}\n"
        f"–õ–∞–≤–∫–∞: {shop_name}\n"
        f"–î–∞—Ç–∞: {record['date']}\n"
        f"–°–º–µ–Ω–∞: {record['time_from']}‚Äì{record['time_to']}\n"
        f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {note}\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å¬ª, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º."
    )


async def on_callback_pick(call: CallbackQuery) -> None:
    try:
        _, request_id_text = call.data.split(":", 1)
        request_id = int(request_id_text)
    except (ValueError, AttributeError):
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    try:
        record = await storage.gs_find_request(request_id)
        if not record:
            await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
            return

        if str(record.get("status")) != "open":
            await call.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)
            return

        picker = call.from_user
        if record["author_id"] == picker.id:
            await call.answer("–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.", show_alert=True)
            return

        author_chat = await bot.get_chat(record["author_id"])
        author_mention = format_mention(author_chat)
        picker_mention = format_mention(picker)

        if record["kind"] == "director":
            new_status = "assigned"
            director_message = (
                "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {picker_mention}"
            )
            worker_message = (
                "üéâ –í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å–º–µ–Ω—É!\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º: {author_mention}"
            )
        else:
            new_status = "picked"
            director_message = (
                "üéØ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Å–º–µ–Ω—É!\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {picker_mention}"
            )
            worker_message = (
                "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –Ω–∞ —Å–º–µ–Ω—É!\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º: {author_mention}"
            )

        channel_message_id = call.message.message_id if call.message else None
        await storage.gs_update_request_status(request_id, new_status, channel_message_id)

        try:
            await bot.send_message(
                record["author_id"], director_message, disable_web_page_preview=True
            )
        except Exception as exc:  # noqa: BLE001
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏ %s", record["author_id"])
            await send_tech(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏ {record['author_id']}: {exc}"
            )

        try:
            await bot.send_message(
                picker.id, worker_message, disable_web_page_preview=True
            )
        except Exception as exc:  # noqa: BLE001
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ %s", picker.id)
            await send_tech(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {picker.id}: {exc}")

        logging.info("–ó–∞—è–≤–∫–∞ %s –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å –Ω–∞ %s", request_id, new_status)
        await call.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as exc:  # noqa: BLE001
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É %s", call.data)
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.", show_alert=True)
        await send_tech(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–∏–∫–∞: {exc}")


async def handle_post_publication(
    chat_id: int,
    author: types.User,
    state: FSMContext,
    kind: str,
) -> None:
    data = await state.get_data()
    shop_id = data.get("shop_id")
    shop_name = data.get("shop_name")
    shops = await fetch_shops()
    if shop_id is not None:
        if shop_id not in shops:
            await bot.send_message(
                chat_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∞–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            )
            await state.finish()
            return
        shop_name = shops[shop_id]
    elif not shop_name:
        shop_name = "–õ—é–±–∞—è –ª–∞–≤–∫–∞"
    payload = {
        "kind": kind,
        "date": data.get("date"),
        "time_from": data.get("time_from"),
        "time_to": data.get("time_to"),
        "shop_id": shop_id,
        "note": data.get("note"),
        "author_id": author.id,
        "shop_name": shop_name,
        "status": "open",
    }

    allowed = await guard_rate_limit(author.id)
    if not allowed:
        await bot.send_message(chat_id, "–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
        await state.finish()
        return

    now_iso = datetime.now(timezone.utc).isoformat()
    payload["created_at"] = now_iso
    payload["updated_at"] = now_iso
    request_id, _ = await storage.gs_append_request(payload)
    payload["id"] = request_id
    text = render_channel_post(payload)
    button_text = "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" if kind == "director" else "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(button_text, callback_data=f"pick:{request_id}")
    )
    channel_message = await bot.send_message(CHANNEL_ID, text, reply_markup=markup)
    try:
        await storage.gs_update_request_status(
            request_id, "open", channel_message_id=channel_message.message_id
        )
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to update channel message id for request %s", request_id)
        await send_tech(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç {request_id}: {exc}")
    await bot.send_message(
        chat_id,
        "–ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ.",
        reply_markup=build_start_keyboard(),
    )
    logging.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –∑–∞—è–≤–∫—É %s —Ç–∏–ø–∞ %s",
        author.id,
        request_id,
        kind,
    )
    await state.finish()


def run_director_flow(dispatcher: Dispatcher) -> None:
    @dispatcher.message_handler(lambda m: m.text == "–Ø –¥–∏—Ä–µ–∫—Ç–æ—Ä –ª–∞–≤–∫–∏")
    async def director_entry(message: types.Message) -> None:
        await ensure_user(message.from_user)
        if message.from_user.id not in ADMINS:
            await message.answer(
                "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤. –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await DirectorStates.date.set()

    @dispatcher.message_handler(state=DirectorStates.date)
    async def director_date(message: types.Message, state: FSMContext) -> None:
        await state.update_data(date=message.text.strip())
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
        await DirectorStates.next()

    @dispatcher.message_handler(state=DirectorStates.time_from)
    async def director_time_from(message: types.Message, state: FSMContext) -> None:
        await state.update_data(time_from=message.text.strip())
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
        await DirectorStates.next()

    @dispatcher.message_handler(state=DirectorStates.time_to)
    async def director_time_to(message: types.Message, state: FSMContext) -> None:
        await state.update_data(time_to=message.text.strip())
        data = await state.get_data()
        error = validate_timeslot(data.get("date", ""), data.get("time_from", ""), data.get("time_to", ""))
        if error:
            await message.answer(error + " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            await DirectorStates.date.set()
            return
        shops = await fetch_shops()
        if not shops:
            await message.answer(
                "–°–ø–∏—Å–æ–∫ –ª–∞–≤–æ–∫ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞.",
                reply_markup=build_start_keyboard(),
            )
            await state.finish()
            return
        keyboard = InlineKeyboardMarkup(row_width=2)
        for shop_id, shop_name in shops.items():
            keyboard.insert(
                InlineKeyboardButton(shop_name, callback_data=f"director_shop:{shop_id}")
            )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–≤–∫—É:", reply_markup=keyboard)

    @dispatcher.callback_query_handler(lambda c: c.data.startswith("director_shop:"), state=DirectorStates.time_to)
    async def director_shop_choice(call: CallbackQuery, state: FSMContext) -> None:
        shop_id = int(call.data.split(":", 1)[1])
        shops = await fetch_shops()
        if shop_id not in shops:
            await call.answer("–¢–∞–∫–æ–π –ª–∞–≤–∫–∏ –Ω–µ—Ç.", show_alert=True)
            return
        await call.answer()
        await state.update_data(shop_id=shop_id, shop_name=shops[shop_id])
        await call.message.edit_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤¬ª.")
        await DirectorStates.next()

    @dispatcher.message_handler(state=DirectorStates.note)
    async def director_note(message: types.Message, state: FSMContext) -> None:
        await state.update_data(note=message.text.strip())
        data = await state.get_data()
        shops = await fetch_shops()
        shop_name = data.get("shop_name") or shops.get(data.get("shop_id"), "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
        summary = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n"
            f"–î–∞—Ç–∞: {data['date']}\n"
            f"–°–º–µ–Ω–∞: {data['time_from']}‚Äì{data['time_to']}\n"
            f"–õ–∞–≤–∫–∞: {shop_name}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['note']}"
        )
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="director_confirm"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="director_cancel"),
        )
        await message.answer(summary, reply_markup=keyboard)
        await DirectorStates.confirm.set()

    @dispatcher.callback_query_handler(lambda c: c.data == "director_cancel", state=DirectorStates.confirm)
    async def director_cancel(call: CallbackQuery, state: FSMContext) -> None:
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
        await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.")

    @dispatcher.callback_query_handler(lambda c: c.data == "director_confirm", state=DirectorStates.confirm)
    async def director_confirm(call: CallbackQuery, state: FSMContext) -> None:
        await call.answer()
        await call.message.edit_text("–ü—É–±–ª–∏–∫—É–µ–º –∑–∞—è–≤–∫—É...")
        await handle_post_publication(call.message.chat.id, call.from_user, state, "director")


def run_worker_flow(dispatcher: Dispatcher) -> None:
    @dispatcher.message_handler(lambda m: m.text == "–Ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∞–≤–∫–∏")
    async def worker_entry(message: types.Message) -> None:
        await ensure_user(message.from_user)
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤—ã–π—Ç–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await WorkerStates.date.set()

    @dispatcher.message_handler(state=WorkerStates.date)
    async def worker_date(message: types.Message, state: FSMContext) -> None:
        await state.update_data(date=message.text.strip())
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
        await WorkerStates.next()

    @dispatcher.message_handler(state=WorkerStates.time_from)
    async def worker_time_from(message: types.Message, state: FSMContext) -> None:
        await state.update_data(time_from=message.text.strip())
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
        await WorkerStates.next()

    @dispatcher.message_handler(state=WorkerStates.time_to)
    async def worker_time_to(message: types.Message, state: FSMContext) -> None:
        await state.update_data(time_to=message.text.strip())
        data = await state.get_data()
        error = validate_timeslot(data.get("date", ""), data.get("time_from", ""), data.get("time_to", ""))
        if error:
            await message.answer(error + " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            await WorkerStates.date.set()
            return
        shops = await fetch_shops()
        keyboard = InlineKeyboardMarkup(row_width=2)
        for shop_id, shop_name in shops.items():
            keyboard.insert(InlineKeyboardButton(shop_name, callback_data=f"worker_shop:{shop_id}"))
        keyboard.add(InlineKeyboardButton("–õ—é–±–∞—è –ª–∞–≤–∫–∞", callback_data="worker_shop:any"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ª–∞–≤–∫—É:", reply_markup=keyboard)

    @dispatcher.callback_query_handler(lambda c: c.data.startswith("worker_shop:"), state=WorkerStates.time_to)
    async def worker_shop_choice(call: CallbackQuery, state: FSMContext) -> None:
        _, raw_id = call.data.split(":", 1)
        if raw_id == "any":
            await call.answer()
            await state.update_data(shop_id=None, shop_name="–õ—é–±–∞—è –ª–∞–≤–∫–∞")
        else:
            try:
                shop_id = int(raw_id)
            except ValueError:
                await call.answer("–¢–∞–∫–æ–π –ª–∞–≤–∫–∏ –Ω–µ—Ç.", show_alert=True)
                return
            shops = await fetch_shops()
            if shop_id not in shops:
                await call.answer("–¢–∞–∫–æ–π –ª–∞–≤–∫–∏ –Ω–µ—Ç.", show_alert=True)
                return
            await call.answer()
            await state.update_data(shop_id=shop_id, shop_name=shops[shop_id])
        await call.message.edit_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é —Ä–æ–ª—å –≥–æ—Ç–æ–≤—ã –≤—ã–π—Ç–∏ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω).")
        await WorkerStates.next()

    @dispatcher.message_handler(state=WorkerStates.note)
    async def worker_note(message: types.Message, state: FSMContext) -> None:
        await state.update_data(note=message.text.strip())
        data = await state.get_data()
        shops = await fetch_shops()
        shop_name = data.get("shop_name") or shops.get(data.get("shop_id"), "–õ—é–±–∞—è –ª–∞–≤–∫–∞")
        summary = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n"
            f"–î–∞—Ç–∞: {data['date']}\n"
            f"–°–º–µ–Ω–∞: {data['time_from']}‚Äì{data['time_to']}\n"
            f"–õ–∞–≤–∫–∞: {shop_name}\n"
            f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['note']}"
        )
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="worker_confirm"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="worker_cancel"),
        )
        await message.answer(summary, reply_markup=keyboard)
        await WorkerStates.confirm.set()

    @dispatcher.callback_query_handler(lambda c: c.data == "worker_cancel", state=WorkerStates.confirm)
    async def worker_cancel(call: CallbackQuery, state: FSMContext) -> None:
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
        await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.")

    @dispatcher.callback_query_handler(lambda c: c.data == "worker_confirm", state=WorkerStates.confirm)
    async def worker_confirm(call: CallbackQuery, state: FSMContext) -> None:
        await call.answer()
        await call.message.edit_text("–ü—É–±–ª–∏–∫—É–µ–º –∑–∞—è–≤–∫—É...")
        await handle_post_publication(call.message.chat.id, call.from_user, state, "worker")


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message) -> None:
    await ensure_user(message.from_user)
    await start_menu(message)


@dp.errors_handler()
async def on_error(update: types.Update, error: Exception) -> bool:
    logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", error)
    await send_tech(f"–û—à–∏–±–∫–∞: {error}")
    return True


async def on_startup(_: Dispatcher) -> None:
    shops = storage.get_shops()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∞–≤–æ–∫: %s", len(shops))
    if WEBHOOK_URL:
        webhook_url = WEBHOOK_URL + WEBHOOK_PATH
        await bot.set_webhook(webhook_url, drop_pending_updates=True)
        logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s", webhook_url)
        info = await bot.get_webhook_info()
        logging.info(
            "Webhook —Å–æ—Å—Ç–æ—è–Ω–∏–µ: pending=%s, ip=%s, last_error_date=%s, last_error_message=%s",
            info.pending_update_count,
            info.ip_address,
            info.last_error_date,
            info.last_error_message,
        )
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")


async def on_shutdown(_: Dispatcher) -> None:
    if WEBHOOK_URL:
        await bot.delete_webhook()
        logging.info("Webhook —É–¥–∞–ª–µ–Ω")


def register_handlers() -> None:
    run_director_flow(dp)
    run_worker_flow(dp)
    dp.register_callback_query_handler(on_callback_pick, lambda c: c.data and c.data.startswith("pick:"))


async def _handle_health(_: web.Request) -> web.Response:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–∞."""
    try:
        info = await bot.get_webhook_info()
        payload: Dict[str, Any] = {
            "status": "ok",
            "webhook_url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "ip_address": info.ip_address,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message,
            "max_connections": info.max_connections,
        }
    except Exception as exc:  # noqa: BLE001
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞")
        payload = {"status": "error", "detail": str(exc)}
    return web.json_response(payload)


async def _handle_root(_: web.Request) -> web.Response:
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ debug root")
    return web.json_response({
        "status": "running",
        "timestamp": datetime.now(TIMEZONE).isoformat(),
        "webhook_path": WEBHOOK_PATH,
    })


def build_web_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/", _handle_root)
    app.router.add_get("/healthz", _handle_health)
    return app


def main() -> None:
    register_handlers()
    if WEBHOOK_URL:
        app = build_web_app()
        executor.start_webhook(
            dispatcher=dp,
            webhook_path=WEBHOOK_PATH,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
            web_app=app,
        )
    else:
        logging.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


if __name__ == "__main__":
    main()


# TODO: –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–Ω–∞–ª–æ–º.
# TODO: –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ open-–∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.
# TODO: –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ CSV.
